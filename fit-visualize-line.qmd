---
title: "Calculate and plot a regression line of prevalence over time"
author: "Brennan Chapman"
format: 
  html:
    code-fold:    TRUE
    code-tools:   TRUE
---

This script calculates and plots a regression line (a line of best fit) for 
pathogen prevalence over time.

```{r message=FALSE}
#| code-summary: Setup

## CHUNK: Setup

usePackage <- function(p, repo = "https://cran.rstudio.com/") {
  if (!is.element(p, installed.packages()[,1])) install.packages(p, dep = TRUE, repos = repo)
  library(p, character.only = TRUE)
}

usePackage("tidyverse")     # Common Operations
usePackage("magrittr")      # Pipes
usePackage("ggplot2")       # Plots
usePackage("broom")         # Get Model Components
usePackage("here")          # Get Paths

```

The supplied data should be in long format, consisting of pathogen prevalence by year.

```{r message=FALSE}
#| code-summary: Import data

## CHUNK: Import data

# Set the path to your data.
# This is an example data set, included with the script.
# CSV with columns: pathogen, year, prevalence.

thedata_path <- here::here("example_data.csv")
#thedata_path <- here::here("proj_data.csv")

# Read the data.
thedata      <- read_csv(file = thedata_path)

# To demonstrate robustness, in the example data, pathogen_2 is missing a data 
# point (NA) and pathogen_3 has an extra data point.

```



## Calculate

```{r message=FALSE}
#| code-summary: Calculate a regression line for each pathogen

## CHUNK: Calculate a regression line for each pathogen.

# The regression model.
do_reg <- function(.data) {
  lm(formula = prevalence ~ year, .data)
}

# Regress for each pathogen.
pathogen_model_list <-
  thedata %>%
    group_by(pathogen) %>%
    # Create nested object with data set.
    nest(.key = "observations") %>% 
    mutate(
      # Run the regression.
      regmodel = map(observations, do_reg), 
      # Get the regression coefficient for year; the slope of the regression line.
      slope    = regmodel[[1]]$coefficients['year'], 
      # Get the p-value of the regression coefficient.
      pval         = summary(regmodel[[1]])$coefficients['year', 'Pr(>|t|)'], 
      glance       = map(regmodel, broom::glance)) %>%
    unnest(glance)
  
# Print the models.
pathogen_model_list %>%
  arrange(pathogen) %>%
  select(c(pathogen, slope, pval, r.squared, adj.r.squared))

```



### Interpretation

- The coefficient for the model's year term (the *slope*) is the average one-year
  rate of change in the pathogen prevalence. 
- The p-value (*pval*) is the significance of the model's year term (via 
  [t-test](https://en.wikipedia.org/wiki/T-statistic)). 
- The R-squared (*r.squared*) is the model's 
  [coefficient of determination](https://en.wikipedia.org/wiki/Coefficient_of_determination),
  which is a measurement of the proportion of variance explained by the model 
  (i.e., goodness of fit).
- The adjusted R-squared (*adj.r.squared*) is the model's coefficient of 
  determination, normalized by the number of model terms.

Note: at this time, a lm model is used; a glm(family = binomial(link="logit"))
model is more appropriate.

## Plot

```{r message = FALSE}
#| code-summary: Calculate expected value

## CHUNK: Calculate the expected value of the regression line at all included years.

years_to_predict        <- seq(min(thedata$year), max(thedata$year))
names(years_to_predict) <- years_to_predict

# A function to get the prediction from the model.
predict_from_model <- function(themodel, topredict) {
  broom::augment(themodel, newdata = tibble(year = topredict))
}

plotted_values <- 
  pathogen_model_list %>%
    mutate(pred_val = map(regmodel, predict_from_model, years_to_predict)) %>%
    unnest(pred_val) %>%
    group_by(pathogen) %>%
    arrange(pathogen, year) %>%
    mutate(delta_year_one = .fitted - first(.fitted), 
           lower_bound_10 = first(.fitted) * 0.90,
           lower_bound_05 = first(.fitted) * 0.95,
           upper_bound_05 = first(.fitted) * 1.05,
           upper_bound_10 = first(.fitted) * 1.10, 
           fold_change    = abs(first(.fitted) -(.fitted)) / first(.fitted))
      
```

```{r message=FALSE}
#| code-summary: Plot the data and regression line 

## CHUNK:  Plot the data, lines of best fit, and percentage change bounds.

ggplot() +
  
  # Plot lower and upper bounds of percent change.
  geom_line(data = plotted_values, aes(x = year, y = lower_bound_10), linetype = 'dashed') +
  geom_line(data = plotted_values, aes(x = year, y = lower_bound_05), linetype = 'dotted') +
  geom_line(data = plotted_values, aes(x = year, y = upper_bound_05), linetype = 'dotted') +
  geom_line(data = plotted_values, aes(x = year, y = upper_bound_10), linetype = 'dashed') +
  
  # Alternative method of generating a line of best fit.
  #geom_smooth(data = thedata,  aes(x = year, y = prevalence), method = lm, se  = FALSE) +
  geom_line(data = plotted_values, aes(x = year, y = .fitted), colour = "blue") + 
  
  # Plot the raw data.
  geom_point(data = thedata, aes(x = year, y = prevalence)) +

  # Label the y axis.
  labs(y = "prevalence") + 
  
  # Facet, wrapping label names.
  facet_wrap(facets = vars(pathogen), scales = "free_y", labeller = labeller(pathogen = label_wrap_gen(20)))

```

Dotted lines represent a 5% change in/of the prevalence. Dashed lines represent a
10% change in/of the prevalence.

